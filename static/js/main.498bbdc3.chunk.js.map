{"version":3,"sources":["logo.svg","components/InputBox.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Component","require","google","compose","withProps","window","withScriptjs","withGoogleMap","GoogleMap","DrawingManager","StreetViewPanorama","OverlayView","WrappedCircle","defaultZoom","defaultCenter","lat","lng","defaultDrawingMode","maps","drawing","OverlayType","CIRCLE","defaultOptions","drawingControl","drawingControlOptions","position","ControlPosition","TOP_CENTER","drawingModes","POLYGON","RECTANGLE","circleOptions","fillColor","fillOpacity","strokeWeight","clickable","editable","zIndex","Boolean","location","hostname","match","ReactDOM","render","className","style","width","height","googleMapURL","loadingElement","containerElement","mapElement","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,kC,mKCEpBC,Y,cCaQC,EAAQ,KAEjCC,G,EAFEC,Q,EAASC,UAEJC,OAAOH,Q,EAQhBD,EAAQ,KALVK,E,EAAAA,aACAC,E,EAAAA,cACAC,E,EAAAA,UAKMC,G,EAJNC,mB,EACAC,YAGyBV,EAAQ,KAA3BQ,gBAgDR,IAAMG,EAAgBN,EAAaC,GAtCnC,WACE,OACA,kBAACC,EAAD,CACAK,YAAe,GACfC,cAAe,CAAEC,IAAK,OAASC,KAAM,SAOrC,kBAACP,EAAD,CACIQ,mBAAoBf,EAAOgB,KAAKC,QAAQC,YAAYC,OACpDC,eAAgB,CACdC,gBAAgB,EAChBC,sBAAuB,CACrBC,SAAUvB,EAAOgB,KAAKQ,gBAAgBC,WACtCC,aAAc,CACZ1B,EAAOgB,KAAKC,QAAQC,YAAYC,OAChCnB,EAAOgB,KAAKC,QAAQC,YAAYS,QAChC3B,EAAOgB,KAAKC,QAAQC,YAAYU,YAGpCC,cAAe,CACbC,UAAU,UACVC,YAAa,GACbC,aAAc,EACdC,WAAW,EACXC,UAAU,EACVC,OAAQ,WCtDEC,QACW,cAA7BjC,OAAOkC,SAASC,UAEe,UAA7BnC,OAAOkC,SAASC,UAEhBnC,OAAOkC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,mBFsED,WACb,OACE,yBAAKC,UAAU,cACf,yBAAKC,MAAO,CAAEC,MAAO,QAASC,OAAQ,UACpC,kBAACnC,EAAD,CACAoC,aAAa,gIACZC,eAAgB,yBAAKJ,MAAO,CAAEE,OAAO,UACpCG,iBAAkB,yBAAKL,MAAO,CAAEE,OAAO,UACvCI,WAAY,yBAAKN,MAAO,CAAEE,OAAO,gBE9EzB,MAASK,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.498bbdc3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from 'react';\n\nclass InputBox extends Component {\n    constructor()\n    {\n        super();\n        this.state= {\n            data: ''\n        }\n    \n\n    }\n    handle(event)\n    {\n        this.setState({\n            data:event.target.value\n        })\n    }\n    render(){\n      return(\n        <div>\n            \n            <input \n            type=\"text\" \n            placeholder=\"Enter number of steps here\"\n            onChange={this.handle.bind(this)} />\n            \n            </div>\n      );\n    }\n  };\n  \n  export default InputBox;","/*global google*/\nimport React from 'react';\nimport logo from './logo.svg';\n// import Map from './components/Map.js'\nimport InputBox from './components/InputBox.js'\nimport './App.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// import FormControl from 'react-bootstrap/lib/FormControl';\n// import {FormControl, FormGroup, ControlLabel, HelpBlock, Checkbox, Radio, Button} from 'react-bootstrap';\n\nimport {Form, FormGroup, ControlLabel, FormControl,Button} from 'react-bootstrap';\n\n\nconst { compose, withProps } = require(\"recompose\");\n\nconst google=window.google;\n\nconst {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  StreetViewPanorama,\n  OverlayView\n} = require(\"react-google-maps\");\n\nconst { DrawingManager } = require(\"react-google-maps/lib/components/drawing/DrawingManager\");\n\n// const { StreetViewPanormaWithAnOverlayView } = require(\"react-google-maps/lib/components/drawing/StreetViewPanormaWithAnOverlayView\");\n\n// const getPixelPositionOffset = (width, height) => ({\n//   x: -(width / 2),\n//   y: -(height / 2),\n// })\n\n\nfunction Map() {\n  return (\n  <GoogleMap \n  defaultZoom = {10}  \n  defaultCenter={{ lat: 33.7490, lng: -84.3880 }}\n\n\n  \n  \n    \n >\n  <DrawingManager\n      defaultDrawingMode={google.maps.drawing.OverlayType.CIRCLE}\n      defaultOptions={{\n        drawingControl: true,\n        drawingControlOptions: {\n          position: google.maps.ControlPosition.TOP_CENTER,\n          drawingModes: [\n            google.maps.drawing.OverlayType.CIRCLE,\n            google.maps.drawing.OverlayType.POLYGON,\n            google.maps.drawing.OverlayType.RECTANGLE,\n          ],\n        },\n        circleOptions: {\n          fillColor: `#ffff00`,\n          fillOpacity: 0.5,\n          strokeWeight: 3,\n          clickable: false,\n          editable: true,\n          zIndex: 1,\n        },\n      }}\n    />\n    </GoogleMap>\n \n  );\n}\n\nconst WrappedCircle = withScriptjs(withGoogleMap(Map));\n\n\nexport default function App() {\n  return (\n    <div className=\"App-header\">\n    <div style={{ width: \"100vw\", height: \"100vh\" }}>\n      <WrappedCircle\n      googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAkcLnJRWmnplhaoKJZJj4lbT1iNNvkxos&v=3.exp&libraries=geometry,drawing,places\"       \n       loadingElement={<div style={{ height: `100%` }} />}\n        containerElement={<div style={{ height: `100%` }} />}\n        mapElement={<div style={{ height: `100%` }} />}\n      />\n    </div>\n    </div>\n  );\n}\n\n\n\n\n\n\n\n\n/*** */\n// function App() {\n\n  // return (\n\n    // <div className=\"App\">\n    //   <header className=\"App-header\">\n    //   <div style= {{width: '100vw', veight:'100vh'}} >\n    //   <WrappedCircle GoogleMapURL= {\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAkcLnJRWmnplhaoKJZJj4lbT1iNNvkxos&v=3.exp&libraries=geometry,drawing,places\"}\n    //   loadingElement={<div style={{height:\"100%\"}} />}\n    //    containerElement= {<div style={{ height: `400px` }} />}\n    //     mapElement = {<div style={{ height: `100%` }} />}\n    //   />\n    //   </div>\n    //   <InputBox/>\n\n    \n        \n      /* { <Form>\n  <Form.Group controlId=\"formBasicEmail\">\n    <Form.Control type=\"email\" placeholder=\"Enter number of steps\" />\n    <Form.Text className=\"text-muted\">\n    </Form.Text>\n  </Form.Group>\n  <Button variant=\"primary\" type=\"submit\">\n    Submit\n  </Button>\n</Form> */\n\n      \n    \n    //   </header>\n    // </div>\n//   );\n// }\n\n// export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}